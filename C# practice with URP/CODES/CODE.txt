public class PlayerMovement : MonoBehaviour
{
    public float speed;
    private float movement;
    private Animator anim;

   
    private void Awake()
    {
        anim = GetComponent<Animator>();
    }

    private void Update()
    {
        movement = Input.GetAxis("Horizontal");
        
        if(movement > 0.1f && Input.GetKey(KeyCode.D))
        {
                Vector3 currentScale = transform.localScale;
            transform.localScale = new Vector3(Mathf.Abs(currentScale.x), currentScale.y, currentScale.z);
            transform.position +=  new Vector3(movement, 0, 0) * speed * Time.deltaTime;
        }

        else if(movement < -0.1f && Input.GetKey(KeyCode.A))
        {
            Vector3 currentScale = transform.localScale;
            transform.localScale = new Vector3(-Mathf.Abs(currentScale.x), currentScale.y, currentScale.z);
            transform.position += new Vector3(movement, 0, 0) * speed * Time.deltaTime;
        }

        anim.SetBool("Running" , movement != 0);
    }
}


public class PlayerJump : MonoBehaviour
{
    [SerializeField] private float jumpForce; 
    [SerializeField] private LayerMask groundLayer;
    [SerializeField] private float coyoteTimeDuration;
    [SerializeField] private int maxJumps = 2;  // Allow 2 jumps (1 ground jump + 1 air jump)

    private Rigidbody2D body;
    private Animator anim;
    private BoxCollider2D boxCollider;
    private float coyoteTimeCounter;
    private int jumpsLeft;  

    private void Awake()
    {
        anim = GetComponent<Animator>();
        body = GetComponent<Rigidbody2D>();
        boxCollider = GetComponent<BoxCollider2D>();
        jumpsLeft = maxJumps; 
    }

    private void Update()
    {
        // Coyote time logic
        if (isGrounded())
        {
            coyoteTimeCounter = coyoteTimeDuration;
            jumpsLeft = maxJumps;  
        }
        else
        {
            coyoteTimeCounter -= Time.deltaTime;
        }

        // Handle jump input
        if (Input.GetKeyDown(KeyCode.Space) && (coyoteTimeCounter > 0 || jumpsLeft > 0))
        {
            Jump();
        }

      if (Input.GetKeyUp(KeyCode.Space) && body.velocity.y > 0)
     body.velocity = new Vector2(body.velocity.x, body.velocity.y / 2);

        anim.SetBool("Grounded", isGrounded());
    }

    private void Jump()
    {
        body.velocity = new Vector2(body.velocity.x, jumpForce);  
        anim.SetTrigger("Jump");
        jumpsLeft--;  
        coyoteTimeCounter = 0f;  
       
    }

    private bool isGrounded()
    {
        RaycastHit2D raycastHit = Physics2D.BoxCast(boxCollider.bounds.center, boxCollider.bounds.size, 0, Vector2.down, 0.1f, groundLayer);
        return raycastHit.collider != null;
    }
}